<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="3" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2018-06-11T15:17:48Z" name="Suite" finished-at="2018-06-11T15:18:33Z" duration-ms="44465">
    <groups>
    </groups>
    <test started-at="2018-06-11T15:17:48Z" name="Test_IMDB" finished-at="2018-06-11T15:18:33Z" duration-ms="44465">
      <class name="tests.IMDBTests">
        <test-method is-config="true" signature="setupBrowser()[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:17:48Z" name="setupBrowser" finished-at="2018-06-11T15:17:57Z" duration-ms="8492" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupBrowser -->
        <test-method is-config="true" signature="createReportLogger(java.lang.reflect.Method)[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:17:58Z" name="createReportLogger" finished-at="2018-06-11T15:17:58Z" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.IMDBTests.verifySearch(java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createReportLogger -->
        <test-method signature="verifySearch(java.lang.String)[pri:1, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:17:58Z" name="verifySearch" data-provider="movies" finished-at="2018-06-11T15:18:06Z" duration-ms="7972" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[lord of the rings]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at tests.IMDBTests.verifySearch(IMDBTests.java:34)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearch -->
        <test-method is-config="true" signature="captureStatus(org.testng.ITestResult)[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:06Z" name="captureStatus" finished-at="2018-06-11T15:18:06Z" duration-ms="737" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySearch status=FAILURE method=IMDBTests.verifySearch(java.lang.String)[pri:1, instance:tests.IMDBTests@6025e1b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureStatus -->
        <test-method is-config="true" signature="createReportLogger(java.lang.reflect.Method)[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:06Z" name="createReportLogger" finished-at="2018-06-11T15:18:06Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.IMDBTests.verifySearch(java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createReportLogger -->
        <test-method signature="verifySearch(java.lang.String)[pri:1, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:06Z" name="verifySearch" data-provider="movies" finished-at="2018-06-11T15:18:14Z" duration-ms="7678" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[harry potter]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearch -->
        <test-method is-config="true" signature="captureStatus(org.testng.ITestResult)[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:14Z" name="captureStatus" finished-at="2018-06-11T15:18:14Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySearch status=SUCCESS method=IMDBTests.verifySearch(java.lang.String)[pri:1, instance:tests.IMDBTests@6025e1b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureStatus -->
        <test-method is-config="true" signature="createReportLogger(java.lang.reflect.Method)[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:14Z" name="createReportLogger" finished-at="2018-06-11T15:18:14Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.IMDBTests.verifySearch(java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createReportLogger -->
        <test-method signature="verifySearch(java.lang.String)[pri:1, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:14Z" name="verifySearch" data-provider="movies" finished-at="2018-06-11T15:18:26Z" duration-ms="12471" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[!@#]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearch -->
        <test-method is-config="true" signature="captureStatus(org.testng.ITestResult)[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:26Z" name="captureStatus" finished-at="2018-06-11T15:18:26Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySearch status=SUCCESS method=IMDBTests.verifySearch(java.lang.String)[pri:1, instance:tests.IMDBTests@6025e1b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureStatus -->
        <test-method signature="verifyInvalidLogin()[pri:2, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:26Z" name="verifyInvalidLogin" finished-at="2018-06-11T15:18:31Z" duration-ms="4592" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyInvalidLogin -->
        <test-method is-config="true" signature="createReportLogger(java.lang.reflect.Method)[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:26Z" name="createReportLogger" finished-at="2018-06-11T15:18:26Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.IMDBTests.verifyInvalidLogin() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createReportLogger -->
        <test-method is-config="true" signature="captureStatus(org.testng.ITestResult)[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:31Z" name="captureStatus" finished-at="2018-06-11T15:18:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyInvalidLogin status=SUCCESS method=IMDBTests.verifyInvalidLogin()[pri:2, instance:tests.IMDBTests@6025e1b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureStatus -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.IMDBTests@6025e1b6]" started-at="2018-06-11T15:18:31Z" name="tearDown" finished-at="2018-06-11T15:18:33Z" duration-ms="1553" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.IMDBTests -->
    </test> <!-- Test_IMDB -->
  </suite> <!-- Suite -->
</testng-results>
